/**
 * üõí CLASSE ORDERLINE - Repr√©sente une ligne dans une commande
 * 
 * C'est un POJO qui associe un Produit (Product) √† une Quantit√© command√©e.
 * Une commande (Order) sera compos√©e d'une liste de ces OrderLine.
 * 
 * üéØ Son r√¥le :
 *   - Stocker quel produit a √©t√© command√©.
 *   - Stocker combien d'exemplaires de ce produit ont √©t√© command√©s.
 * 
 * Exemple : 2 x "T-shirt Bleu" (OrderLine 1) + 1 x "Casquette Rouge" (OrderLine 2)
 */
public class OrderLine {

    // --- üìã ATTRIBUTS ---
    private Product product;    // Le produit concern√© par cette ligne de commande
    private int quantity;       // La quantit√© de ce produit command√©e

    /**
     * üèóÔ∏è CONSTRUCTEUR - Cr√©e une nouvelle ligne de commande
     */
    public OrderLine(Product product, int quantity) {
        // üí° On v√©rifie souvent ici si product n'est pas null et si quantity > 0
        //    mais pour un TP, on peut simplifier.
        this.product = product;
        this.quantity = quantity;
    }

    // --- üîç GETTERS (pour lire les informations de la ligne) ---
    public Product getProduct() {
        return product;
    }

    public int getQuantity() {
        return quantity;
    }

    // üí° REMARQUE : Pas de SETTERS !
    // C'est un bon choix ici. Une fois qu'une ligne de commande est cr√©√©e
    // (par exemple, "3 stylos bleus"), on ne la modifie g√©n√©ralement pas.
    // Si l'utilisateur veut changer, on supprime cette ligne et on en cr√©e une nouvelle.
    // Cela rend l'objet "immutable" (non modifiable apr√®s cr√©ation), ce qui est bien !
}